@*<link href="~/Content/bootstrap-datepicker3.css" rel="stylesheet" />*@
<link rel="stylesheet" href="~/Content/ElementUI/element-ui.css">
@{
    ViewBag.Title = "收货单";
}
<p>

</p>
<div id="rnItems">
    <div class="form-group">
        出货日期: <el-date-picker v-model="selectedDate" type="date" format="yyyy-MM-dd" placeholder="选择日期" id="date"></el-date-picker>
        <el-button v-on:click="updateRns()">搜索</el-button>
    </div>
    <hr />
    出货日期:<b>{{cdate}}</b>
    <br />
        <table class="table">
            <tr>
                <td>
                    <b>订单号</b>
                </td>
                <td>
                    <b>SkuId</b>
                </td>
                <td>
                    <b>商品名称</b>
                </td>
                <th>
                    规格
                </th>
                <th>
                    单位
                </th>
                <th>
                    订单数量
                </th>
                <th>
                    实收数量
                </th>
                <th>
                    实收金额
                </th>
                <th>
                    采购数量
                </th>
                <th>
                    采购单价
                </th>
                <th>
                    采购金额
                </th>
                <th>
                    供货商
                </th>
                <th>
                    付款状态
                </th>
                <th>
                    退货数量
                </th>
                <th>
                    退货金额
                </th>
                <th>
                    备注
                </th>
                <th></th>
            </tr>
            <template v-for="(rng,poNo) in rns">
                <tr v-for="(rn,index) in rng" :style="{'color':getColor(poNo)}">
                    <td><b>{{poNo}}</b></td>
                    <td>{{rn.skuId}}</td>
                    <td>{{rn.spuName}}</td>
                    <td>{{rn.skuSpec}}</td>
                    <td>{{rn.skuDictUnitName}}</td>
                    <td>{{rn.prePoAmount}}</td>
                    <td>{{rn.poAmount<0 ? '' : rn.poAmount}}</td>
                    <td>{{rn.poAmount<0 ? '' : rn.sumPoPrice/100.00}}</td>
                    <td><input data-val="true" data-val-number="The field ContrastPrice must be a number." style="width:60px" type="text" name="item.Quantity" v-model="rn.Quantity" /></td>
                    <td><input data-val="true" data-val-number="The field ContrastPrice must be a number." style="width:60px" type="text" name="item.UnitPrice" v-model="rn.UnitPrice" /></td>
                    <td><input data-val="true" data-val-number="The field ContrastPrice must be a number." style="width:70px" type="text" name="item.TotalPrice" disabled="disabled" v-model="rn.Quantity * rn.UnitPrice" /></td>
                    @*<td><input data-val="true" type="text" v-model="rn.Supplier" style="width:150px"/></td>*@
                    <td style="width:150px">
                        <template>
                            <el-select v-on:change="onSelectChanged($event,rn.skuId)" v-model="rn.Supplier" clearable filterable allow-create default-first-option size="mini" placeholder="请选择供应商">
                                <el-option v-for="item in supplierOptions[rn.skuId]" :label="item.Value" :value="item.Value"> </el-option>
                            </el-select>
                        </template>
                    </td>
                    <td><input style="width:30px" type="checkbox" v-model="rn.PaymentStatus" /></td>
                    <td><input data-val="true" data-val-number="The field ContrastPrice must be a number." style="width:50px" type="text" name="item.ReturnAmount" v-model="rn.ReturnAmount" /></td>
                    <td><input data-val="true" data-val-number="The field ContrastPrice must be a number." style="width:50px" type="text" name="item.ReturnPrice" v-model="rn.ReturnPrice" /></td>
                    <td><input data-val="true" type="text" v-model="rn.Remark" style="width:50px" /></td>
                    <td>
                        <div v-on:click="addRn(rn.poNo,index)" style="cursor:pointer;color:darkgreen"><b>+</b></div><div v-on:click="delRn(rn.poNo,index)" style="cursor:pointer;color:red"><b>-</b></div>
                    </td>
                </tr>
            </template>
        </table>
    <div class="form-group">
        <label style="color:green">{{saveStatus}}</label><br />
        <el-button v-on:click="SaveRns()">保存</el-button>
    </div>
</div>
@section Scripts {
    <script src="~/Scripts/axios.min.js"></script>
    <script src="~/Scripts/vue.js"></script>
    <script src="~/Scripts/moment.min.js"></script>

    <script src="~/Scripts/ElementUI/element-ui.js"></script>
    <script>
        Vue.prototype.$http = axios;
        var rnsVm = new Vue({
            el: "#rnItems",
            data: {
                selectedDate: '',
                cdate: '',
                rns: '',//空的数据
                supplierOptions: '',
                saveStatus: '',
                deletedRns: [],
                newRnId: 100000,
                color: '',
                perPoNo: ''
            },
            mounted() {
                this.getData('/api/qny/GetRnItems');//通过this.getData的URL取得API数据
            },
            computed: {
                remaining: function () {
                    return this.num;
                }
            },//这里我们声明了一个计算属性 remaining,通过返回this.num的值做为未完成总数
            methods: {//VUE事件处理器
                getData(url) {
                    if (this.selectedDate == '') this.selectedDate = moment('2018-12-13').format("YYYY-MM-DD");
                    this.$http.get(url, { params: { cDate: moment(this.selectedDate).format("YYYY-MM-DD") }, headers: { "Content-Type": "application/json" } }).then((response) => {
                        this.rns = response.data;
                        this.cdate = moment(this.selectedDate).format("YYYY-MM-DD");
                        this.saveStatus = '';
                        this.getSupplierOptions();
                    });
                },//this.getData取得数据库数据，并取得未完成事件总数
                postData(url) {
                    if ((this.rns == null || JSON.stringify(this.rns) <= 2) && (this.deletedRns == null || !deletedRns.length < 0)) return;
                    this.$http.post(url, { payload: { rns: this.rns, deletedRns: this.deletedRns } }).then((response) => {
                        this.saveStatus = response.data;
                    });
                },
                getSupplierOptions() {
                    var skuIds = [];
                    var url = '/api/qny/GetSupplierOptions';
                    for (rn in this.rns) {
                        for (r in this.rns[rn]) {
                            skuIds.push(this.rns[rn][r].skuId);
                        }
                    }
                    this.$http.post(url, { payload: Array.from(new Set(skuIds)), headers: { "Content-Type": "application/json" } }).then((response) => {
                        this.supplierOptions = response.data;
                    });
                },
                updateRns() {
                    this.getData('/api/qny/GetRnItems');
                },
                SaveRns() {
                    this.saveStatus = "";
                    if (!this.CheckNumber('item.Quantity') ||
                        !this.CheckNumber('item.UnitPrice') ||
                        !this.CheckNumber('item.TotalPrice') ||
                        !this.CheckNumber('item.ReturnAmount') ||
                        !this.CheckNumber('item.ReturnPrice')) {
                        this.$message.error('数据格式错误,请确认输入的是半角数字!');
                        return false;
                    }

                    this.postData('/api/qny/PostRnItems');
                },
                CheckNumber(name) {
                    var elements = document.getElementsByName(name);
                    if (elements != null && elements.length > 0) {
                        for (i = 0; i < elements.length; i++) {
                            var value = elements[i].value;
                            if (value != null && value != "" && isNaN(value)) {
                                elements[i].focus();
                                elements[i].select();
                                //alert("plase input number!")
                                //document.getElementById("MessageLabel").style.color = "red";
                                //document.getElementById("MessageLabel").innerText = "数据格式错误,请确认输入的是半角数字!";
                                return false
                            }
                        }
                    }
                    return true;
                },
                onSelectChanged(value, skuId) {
                    var obj = {};
                    obj = this.supplierOptions[skuId].find(function (item) {
                        return ((item.Value || '') == (value || '')) || ((value || '' != '') && (item.Value || '') != '' && item.Value.toLocaleLowerCase() == value.toLocaleLowerCase());
                    });
                    if (obj == undefined || obj == null || obj.length == 0) {
                        this.supplierOptions[skuId].splice(0, 0, { Key: skuId, Value: value });
                    }
                },
                addRn(poNo, index) {
                    var newRn = JSON.parse(JSON.stringify(this.rns[poNo][index]));
                    newRn.Id = this.newRnId;
                    newRn.RnId = '';
                    this.newRnId++;
                    this.rns[poNo].splice(index + 1, 0, newRn)
                },
                delRn(poNo, index) {
                    var rnId = this.rns[poNo][index].RnId;
                    if (rnId != null && rnId != '') {
                        this.deletedRns.push(rnId)
                    }
                    this.rns[poNo].splice(index, 1)
                },
                getColor(poNo) {
                    var c1 = 'darkblue';
                    var c2 = 'darkorange';
                    if (this.perPoNo == '') {
                        this.color = c1;
                        this.perPoNo = poNo;
                        return c1;
                    }
                    if (poNo == this.perPoNo) {
                        return this.color;
                    }
                    else {
                        this.perPoNo = poNo;
                        this.color = this.color == c1 ? c2 : c1;
                        return this.color;
                    }
                }
            },//完成任务或者撤销任务
        });
    </script>
}
